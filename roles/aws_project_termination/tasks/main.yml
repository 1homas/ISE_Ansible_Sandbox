---
#------------------------------------------------------------------------------
# ISE Eternal Evaluation (ISEEE) - Destroy Playbook
#------------------------------------------------------------------------------
# Terminate AWS EC2 Instances for a tagged project:
#   - Terminate all EC2 instances
#   - Delete Subnets
#   - Delete Route Table
#   - Delete Internet Gateway
#   - Delete Security Groups in VPC
#   - Delete VPCs
#   - Delete private key
#   - TODO: Delete Route53 records
#   - TODO: Delete S3 Buckets
#
# Run: `ansible-playbook destroy.yaml`
#------------------------------------------------------------------------------

#----------------------------------------------------------------------------
# Confirm Project!
#----------------------------------------------------------------------------

- name: Prompt for Project Name to Delete
  ansible.builtin.pause:
    prompt: "Confirm Project Name to Delete [{{ lookup('env','PROJECT') | default('PROJECT') }}]"
  register: project_input

- name: Set Project Name
  when:
    - project_input.user_input is defined
    - project_input.user_input | length > 0
  ansible.builtin.set_fact:
    project: "{{ project_input.user_input | trim }}"
    ssh_key_directory: ~/.ssh
    ssh_key_name: "{{ project }}"

#----------------------------------------------------------------------------
# Get All Resources
#----------------------------------------------------------------------------

- name: Get All AWS EC2 Instances | project:{{ project }}
  amazon.aws.ec2_instance_info: # Get All by default
    filters:
      "tag:project": "{{ project }}"
      instance-state-name:
        - rebooted # convenience alias for state=stopped immediately followed by state=running
        - restarted # convenience alias for state=stopped immediately followed by state=started
        - running # state=present + ensures the instances are running
        - started # state=running + waits for EC2 status checks to report OK if wait=true
        - stopped # ensures an existing instance is stopped.
        - present # instances exist, but does not guarantee any state (e.g. running)
      # - terminated  # ensures an existing instance is terminated.
      # - absent      # alias for state=terminated
  register: ec2_instances

- name: Get All AWS VPCs | project:"{{ project }}"
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:project": "{{ project }}"
  register: vpcs

- name: Get All AWS Dangling ENIs in the VPC
  when: vpcs.vpcs is defined
    and vpcs.vpcs | length > 0
  amazon.aws.ec2_eni_info:
    filters:
      vpc-id: "{{ vpcs.vpcs[0].id }}"
      "tag:project": "{{ project }}"
  register: enis

# - name: Get All DHCP Option in the VPC
#   amazon.aws.ec2_vpc_dhcp_option_info:
#     # filters:
#     #   "tag:project": "{{ project }}"
#   register: dhcp_info

- name: Get All AWS VPC Subnets | project:"{{ project }}"
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      "tag:project": "{{ project }}"
  register: subnets

- name: Get All AWS VPC Route Tables | project:"{{ project }}"
  amazon.aws.ec2_vpc_route_table_info:
    filters:
      "tag:project": "{{ project }}"
  register: route_tables

- name: Get All AWS VPC Internet Gateways | project:"{{ project }}"
  amazon.aws.ec2_vpc_igw_info:
    filters:
      "tag:project": "{{ project }}"
  register: igws

- name: Get All AWS EC2 Security Groups | project:"{{ project }}"
  amazon.aws.ec2_group_info:
    filters:
      "tag:project": "{{ project }}"
  register: security_groups

- name: Get All AWS EC2 Elastic IPs | project:"{{ project }}"
  amazon.aws.ec2_eip_info:
    # filters:
    #   "tag:project": "{{ project }}"
    # region: "{{ region }}"
  register: eips

- name: Show AWS EC2 Elastic IPs (eips)
  ansible.builtin.debug:
    msg: "{{ eips.addresses }}"
  # Returns
  # eips:
  # - allocation_id: eipalloc-0a3835df4fa304091
  #   public_ip: 13.56.167.144

- name: Show AWS EC2 Instances
  delegate_to: localhost
  when:
    - ec2_instances is defined
    - ec2_instances.instances is defined
    - ec2_instances.instances | count > 0
  vars:
    head: [
        "state",
        "name",
        "image_id",
        "instance_id",
        "instance_type",
        # "key_name", # SSH key name
        "private_ip_address",
        "public_ip_address",
        "tags",
        # "security_groups",
      ]
    hide: []
    maxw: 40
    rows: "{{ ec2_instances.instances | flatten }}"
    temp: "{{ lookup('template', 'list_of_dicts.j2') }}"
  ansible.builtin.debug:
    msg: "{{ temp }}"

#----------------------------------------------------------------------------
# Summarize Resources to Destroy
#----------------------------------------------------------------------------
- name: Resource Summary
  ansible.builtin.debug:
    msg: |
      - {{ vpcs.vpcs | length }} VPCs
      - {{ subnets.subnets | length }} Subnets
      - {{ route_tables.route_tables | length }} Route Tables
      - {{ igws.internet_gateways | length }} Internet Gateways
      - {{ security_groups.security_groups | length }} Security Groups
      - {{ ec2_instances.instances | length }} EC2 Instances
      - {{ enis.network_interfaces | default([]) | length }} ENIs

#----------------------------------------------------------------------------
# Confirm Destruction!
#----------------------------------------------------------------------------

- name: Confirm Project Deletion
  ansible.builtin.pause:
    prompt: |
       
              /\
             /  \
            / ❕ \   DELETE ALL resources in project "{{ project }}"? [y/n] (yes)
           /______\
       
  register: input

- name: Set Delete Confirmation
  when: input.user_input is defined
  ansible.builtin.set_fact:
    delete_confirmed: "{{ (input.user_input | length == 0) or (input.user_input[0] | lower == 'y') }}"

#----------------------------------------------------------------------------
# Delete VPC Resources
#----------------------------------------------------------------------------
- name: Delete AWS VPC Resources
  when: delete_confirmed
  block:
    - name: Delete All EC2 instances | project:{{ project }}
      when: delete_confirmed and ec2_instances is defined and ec2_instances | length > 0
      amazon.aws.ec2_instance:
        state: absent
        wait: yes
        filters:
          # instance-state-name: [ "running" ]
          "tag:project": "{{ project }}"
      register: ec2_instances_deleted

    - name: Delete All AWS Dangling ENIs | project:{{ project }}
      when: delete_confirmed and enis.network_interfaces is defined and enis.network_interfaces | length > 0
      loop: "{{ enis.network_interfaces }}"
      amazon.aws.ec2_eni:
        state: absent
        eni_id: "{{ item.id }}"
      register: enis_deleted

    # - name: Delete All DHCP Options | project:{{ project }}
    #   amazon.aws.ec2_vpc_dhcp_option:
    #     # vpc_id: "{{ vpcs.vpcs[0].id }}"
    #     state: absent
    #   register: dhcp_info_deleted

    - name: Delete All AWS VPC Subnets | project:{{ project }}
      when: delete_confirmed and subnets is defined and subnets.subnets | length > 0
      loop: "{{ subnets.subnets }}"
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ item.vpc_id }}"
        cidr: "{{ item.cidr_block }}"
        state: absent
      register: subnets_deleted

    - name: Delete All AWS VPC Route Tables | project:{{ project }}
      when: delete_confirmed and route_tables is defined and route_tables.route_tables | length > 0
      loop: "{{ route_tables.route_tables }}"
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ item.id }}"
        lookup: id
        state: absent
      register: route_tables_deleted

    - name: Delete All AWS VPC Internet Gateways | project:{{ project }}
      when: delete_confirmed and igws is defined # and igws.internet_gateways | length > 0
      loop: "{{ vpcs.vpcs }}"
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ item.vpc_id }}"
        state: absent
      register: igws_deleted

    - name: Delete All AWS EC2 Security Groups | project:{{ project }}
      when: delete_confirmed and security_groups is defined and security_groups.security_groups | length > 0
      loop: "{{ security_groups.security_groups }}"
      amazon.aws.ec2_group:
        group_id: "{{ item.group_id }}"
        state: absent
      register: security_groups_deleted

    - name: Delete All VPCs | project:{{ project }}
      when: delete_confirmed and vpcs is defined and vpcs.vpcs | length > 0
      loop: "{{ vpcs.vpcs }}"
      amazon.aws.ec2_vpc_net:
        vpc_id: "{{ item.vpc_id }}" # required
        purge_cidrs: yes # Remove CIDRs associated with VPC and no in cidr_block
        state: absent
      register: vpcs_deleted

    # - name: Disassociate an Elastic IP from an instance
    #   amazon.aws.ec2_eip:
    #     device_id: i-1212f003
    #     ip: 93.184.216.119
    #     state: absent

    - name: Disassociate and Delete AWS Elastic IPs from EC2 instances
      when: delete_confirmed and ec2_instances is defined and ec2_instances | length > 0
      loop: "{{ eips.addresses }}"
      amazon.aws.ec2_eip:
        state: absent
        # device_id: "{{ item.instance_id }}"
        ip: "{{ item.public_ip }}"
      register: eips_deleted

    #
    # Delete the keypair from AWS
    #
    - name: Delete AWS EC2 SSH Keypair by Name ({{ ssh_key_name }})
      when: delete_confirmed
      amazon.aws.ec2_key:
        name: "{{ ssh_key_name }}"
        state: absent
      register: aws_ec2_key_deleted

    #
    # Delete the local keypair
    #
    - name: Delete Local SSH Private Key ({{ ssh_key_private_file }})
      when:
        - delete_confirmed
        - ssh_key_name is defined
      ansible.builtin.file:
        path: "{{ ssh_key_private_file }}"
        state: absent
      register: ssh_key_private_file_deleted

    - name: Delete Local SSH Public Key ({{ ssh_key_public_file }})
      when:
        - delete_confirmed
        - ssh_key_name is defined
      ansible.builtin.file:
        path: "{{ ssh_key_public_file }}"
        state: absent
      register: ssh_key_public_file_deleted

    #----------------------------------------------------------------------------
    # Delete Route53 DNS Records
    #----------------------------------------------------------------------------

    # - name: Retrieve the DNS records
    #   community.aws.route53:
    #     state: get
    #     zone: "{{ domain_name }}"
    #     record: new.foo.com
    #     type: A
    #   register: records

    # - name: Delete A record using the results from the get command
    #   community.aws.route53:
    #     state: absent
    #     zone: "{{ domain_name }}"
    #     record: "{{ rec.set.record }}"
    #     ttl: "{{ rec.set.ttl }}"
    #     type: "{{ rec.set.type }}"
    #     value: "{{ rec.set.value }}"

    # - name: Delete public DNS entry for the ISE node(s)
    #   community.aws.route53:
    #     state: absent
    #     zone: "{{ domain_name }}"
    #     record: "{{ item.tags.Name }}.{{ domain_name }}"
    #     # overwrite: yes
    #     # private_zone: no
    #     # type: A
    #     # ttl: 7200
    #     # value: "{{ item.public_ip_address }}"
    #     # wait: no

    # - name: Delete private DNS entry for the ISE node(s)
    #   community.aws.route53:
    #     state: absent
    #     zone: "{{ domain_name }}"
    #     record: "{{ item.tags.Name }}.{{ domain_name }}"
    #     # overwrite: yes
    #     # private_zone: yes
    #     # type: A
    #     # wait: no

    # - name: Retrieve the DNS details
    #   community.aws.route53:
    #     state: get
    #     zone: "{{ domain_name }}"
    #     record: "{{ domain_name }}"
    #     type: A
    #   register: rec

    # - name: Delete A records using the results from the get command
    #   community.aws.route53:
    #     state: absent
    #     zone: "{{ domain_name }}"
    #     record: "{{ rec.set.record }}"
    #     ttl: "{{ rec.set.ttl }}"
    #     type: "{{ rec.set.type }}"
    #     value: "{{ rec.set.value }}"

    - name: Project {{ project }} Terminated in AWS!
      ansible.builtin.import_role:
        name: banner
      vars:
        banner_name: cisco_secure_ise_logo_small
        # 💡 Use single-quotes (') for banner text!
        #    Ansible will interpret \'s inside "'s as a special char delimiter!
        banner_line_1: "     _ ._  _ , _ ._                                                                "
        banner_line_2: "   (_ ` ( `  )_  .__)     ____              _                                 _  _ "
        banner_line_3: ' ( (  (    )   `)  ) _)  |  _ \   ___  ___ | |_  _ __  ___   _   _   ___   __| || |'
        banner_line_4: '(__ (_   (_ . _) _) ,__) | | | | / _ \/ __|| __|| `__|/ _ \ | | | | / _ \ / _` || |'
        banner_line_5: '    `~~`\ ` . /`~~`      | |_| ||  __/\__ \| |_ | |  | (_) || |_| ||  __/| (_| ||_|'
        banner_line_6: '         ;   ;           |____/  \___||___/ \__||_|   \___/  \__, | \___| \__,_|(_)'
        banner_line_7: '________/_ __ \______________________________________________|___/_________________'
        banner_text: Project {{ project }} is Destroyed!
