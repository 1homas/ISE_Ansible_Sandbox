---
# tasks file for roles/aws_ec2_ubuntu

- name: Role Assertions
  ansible.builtin.assert:
    that: 
      - ssh_key_name is defined
      - ubuntu_instances is defined


- name: Security Group | sg_allow_all
  amazon.aws.ec2_group:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    name: sg_allow_all
    description: Public Access Security Group
    rules:
      - proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 0
        to_port: 65535
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow everything TCP
      - proto: udp
        from_port: 0
        to_port: 65535
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow everything UDP
    tags:
      Name: sg_allow_all
      environment: demo # [Prod, Dev, QA, Stage, Test]
      owner: "{{ owner }}" # Owner of the application, workload, or service
      project: "{{ project }}"
      started: "{{ '%Y-%m-%dT%H:%M:%S-%z' | strftime }}"
  register: sg


- name: Security Group | sg_icmp_ssh_http_https
  amazon.aws.ec2_group:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    state: present
    name: sg_icmp_ssh_http_https
    description: sg_icmp_ssh_http_https
    rules:
      - rule_desc: Allow ICMP
        proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0 # any
      - rule_desc: Allow SSH
        proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0 # any
      - rule_desc: Allow HTTP Port
        proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0 # any
      - rule_desc: Allow HTTPS Port
        proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0 # any
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0 # any
    tags:
      Name: sg_icmp_ssh_http_https
      application: http,httpd
      owner: "{{ owner }}" # Owner of the application, workload, or service
      project: "{{ project }}"
      started: "{{ '%Y-%m-%dT%H:%M:%S-%z' | strftime }}"
  register: sg


- name: Create Ubuntu Instance
  when: 
    - ubuntu_instances is defined
    - ubuntu_instances | count > 0
  loop: "{{ ubuntu_instances }}"
  amazon.aws.ec2_instance:
    # state: present  # instances exist, but no state guarantee
    state: "{{ item.state | default('running') }}" # present + ensures the instances are running to get public IP address!
    # state: started  # running + waits for EC2 status checks to report OK if wait=true
    name: "{{ item.name }}"
    region: "{{ region }}"
    vpc_subnet_id: "{{ subnet_private.subnet.id }}"
    image_id: "{{ item.image_id }}"
    instance_type: "{{ item.instance_type }}"
    key_name: "{{ item.ssh_key_name | default( ssh_key_name ) }}"
    network:
      assign_public_ip: "{{ item.assign_public_ip | default('no')  }}"
      delete_on_termination: yes
      private_ip_address: "{{ item.private_ip_address | default( omit ) }}"
    security_group: "{{ item.security_group }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          delete_on_termination: true
          volume_size: "{{ item.volume_size | default( 20 ) }}" # GB
    wait: yes # wait for the desired state; default: yes
    # wait_timeout: 300     # default: 600 seconds
    tags: "{{ item.tags | default( omit ) }}"
  register: ec2

- name: Show EC2 Instances
  ansible.builtin.debug: 
    var: ec2
    # verbosity: 1