---
# tasks file for roles/ise_config_restore
#------------------------------------------------------------------------------
# Restore an ISE Configuration Backup using
# - ise_repository_name
# - ise_restore_filename
# - ise_backup_encryption_key
#------------------------------------------------------------------------------

- name: Role Assertions
  ansible.builtin.assert:
    that:
      - ise_repository_name is defined
      - ise_repository_name != ''
      - ise_backup_encryption_key is defined
      - ise_backup_encryption_key != ''
      - ise_restore_filename is defined
      - ise_restore_filename != ''
  register: role_assertions
  # ignore_errors: true


#------------------------------------------------------------------------------
# Perform the ISE Restore
#------------------------------------------------------------------------------

# 🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑
# Do Not Use `cisco.ise.backup_restore`
# cisco.ise.backup_restore  2.5.12 may exceed 60 seconds and throws a read timeout.
# cisco.ise.backup_restore does not support an extended timeout variable.
# msg: Socket error HTTPSConnectionPool(host=''1.2.3.4'', port=443): Read timed out. (read timeout=60)'
# 🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑
# - name: ISE Config Restore from Backup
#   when:
#     - ise_repository_name is defined
#     - ise_restore_filename is defined
#     - ise_backup_encryption_key is defined
#   vars:
#       # ansible_command_timeout has no effect
#       command_timeout: 120 # Global command timeout setting; default 30s
#   cisco.ise.backup_restore:
#     ise_hostname: "{{ ansible_host }}"
#     ise_username: "{{ ise_username | default( omit ) }}"
#     ise_password: "{{ ise_password | default( omit ) }}"
#     repositoryName: "{{ ise_repository_name | default( omit ) }}"
#     restoreFile: "{{ ise_restore_filename | default( omit ) }}"
#     backupEncryptionKey: "{{ ise_backup_encryption_key | default( omit ) }}"
#     restoreIncludeAdeos: "{{ ise_restore_adeos | default( omit ) }}"
#   register: ise_restore_status
#   ignore_errors: true
# 🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑🛑

# Triggers a configuration DB restore job on the ISE node. 
# The API returns the task ID.
# Use the cisco.ise.tasks_info module to get the status of the restore job.
# Unclear from the restore API what exactly is done before the status is returned.
- name: Restore ISE Configuration | {{ ise_restore_filename }}
  delegate_to: localhost
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/api/v1/backup-restore/config/restore"
    method: POST
    url_username: "{{ ise_username }}"
    url_password: "{{ ise_password }}"
    force_basic_auth: yes
    force: true # do not get a cached copy
    follow_redirects: safe
    body_format: json
    body: |
      {
        "repositoryName": "{{ ise_repository_name }}",
        "backupEncryptionKey": "{{ ise_backup_encryption_key }}",
        "restoreFile": "{{ ise_restore_filename }}",
        "restoreIncludeAdeos": "{{ ise_restore_adeos }}"
      }
    status_code: [
        202, # Config DB restore task initiated
        400, # Invalid Input: Invalid repository name, etc.
        401, # Unauthorized
        405, # A backup or restore is already in progress
      ]
    timeout: 600 # in seconds (10 minutes)
    validate_certs: "{{ lookup('env', 'ISE_VERIFY') | default(false) }}"
    return_content: true
  register: ise_restore_status
  failed_when: ise_restore_status.status != 202
  ignore_errors: true # Errors do not stop execution

  # Example ise_restore_status Results
  # ```
  # ise_restore_status:
  #   elapsed: 59
  #   json:
  #     response:
  #       id: f2cf6b20-2efc-11ee-9905-2a86f87504d1
  #       message: Config DB restore task initiated. Please use Task Service status API to get the status of the restore job
  #   status: 202
  # ```

- name: ISE Configuration Restore Failed
  when: 
    - ise_restore_status is defined
    - ise_restore_status.status != 202
  ansible.builtin.debug:
    var: ise_restore_status.json.response

- name: Set ISE Restore Task ID | {{ ise_restore_status.json.response.id }}
  when: 
    - ise_restore_status is defined
    - ise_restore_status.failed == false
  ansible.builtin.set_fact:
    ise_restore_task_id: "{{ ise_restore_status.json.response.id }}"

- name: ISE Restore Task Status | {{ ise_restore_task_id }}
  when: 
    - ise_restore_task_id is defined
  cisco.ise.tasks_info:
    ise_hostname: "{{ ansible_host }}"
    ise_username: "{{ ise_username | default( omit ) }}"
    ise_password: "{{ ise_password | default( omit ) }}"
    taskId: "{{ ise_restore_status.json.response.id }}"
  register: ise_restore_progress
  # until: ise_restore_progress.ise_response.failCount != None or ise_restore_progress.ise_response.successCount != None
  # delay: 10 # Seconds to delay between retries in `until` loop; Default: 0
  # retries: 60 # Stop after N retries in `until` loop
  ignore_errors: true

  # Example `ise_restore_progress` Results
  # ```
  # ise_response:
  #   detailStatus:
  #   - ' '
  #   executionStatus: IN_PROGRESS
  #   failCount: null
  #   id: f4f6d6a0-2f0a-11ee-ac12-2273676164ee
  #   moduleType: CONFIG BACKUP RESTORE MODULE
  #   resourcesCount: 1
  #   startTime: '1690743460106'
  #   successCount: null
  # ```

# ⧖ISE 3.2 @ c5.4xlarge : 190s, 222s
- name: Wait for ISE API Gateway ∇ ∇ ∇ (⧖190s|➚600s)
  delegate_to: localhost
  when: ise_restore_task_id is defined
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: 443 # GUI / REST / API Gateway
    state: stopped # Port is CLOSED [started (default)|stopped|present|absent|drained]
    sleep: 10 # Seconds to sleep between checks; Default: 1
    timeout: 600 # 600s == 10m # Default: 300. Stop checking after <seconds>
  ignore_errors: true # Errors do not stop execution

# ⧖ISE 3.2 @ c5.4xlarge : 1500s, 1404s
- name: Wait for ISE API Gateway ∆ ∆ ∆ (⧖1500s|➚3600s)
  delegate_to: localhost
  when: ise_restore_task_id is defined
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: 443 # GUI / REST / API Gateway
    state: started # [started (default)|stopped|present|absent|drained]
    sleep: 10 # Seconds to sleep between checks; Default: 1
    timeout: 3600 # 3600s == 1 hour # Default: 300. Stop checking after <seconds>
  ignore_errors: true # Errors do not stop execution

# ⧖ISE 3.2 @ c5.4xlarge : 558s
- name: Wait for ISE Application Server GUI Login Screen (⧖600s|➚1200s))
  delegate_to: localhost
  when: ise_restore_task_id is defined
  ansible.builtin.uri:
    url: https://{{ ansible_host }}/admin/login.jsp
    method: GET
    follow_redirects: safe
    timeout: 10
    validate_certs: no
    return_content: no
  register: ise_login_info
  until: ise_login_info.status == 200
  delay: 10 # Seconds to delay between retries in `until` loop; Default: 0
  retries: 120 # Stop after N retries in `until` loop

  # Example `ise_login_info` Results
  # ```
  # status: 200
  # attempts: 22
  # ```


#------------------------------------------------------------------------------
# Perform a final check on the Restore Task Status.
#
# 💡 Use timeout:300 to prevent this failure:
# The cisco.ise.tasks_info action failed to execute in the expected time frame (30) and was terminated
#------------------------------------------------------------------------------
- name: ISE Restore Task Status | {{ ise_restore_task_id }}
  when: ise_restore_task_id is defined
  cisco.ise.tasks_info:
    ise_hostname: "{{ ansible_host }}"
    ise_username: "{{ ise_username | default( omit ) }}"
    ise_password: "{{ ise_password | default( omit ) }}"
    taskId: "{{ ise_restore_task_id }}"
  register: ise_restore_task_status
  until: ise_restore_task_status.ise_response.failCount != None or ise_restore_task_status.ise_response.successCount != None
  delay: 10 # Seconds to delay between retries in `until` loop; Default: 0
  retries: 240 # Stop after N retries in `until` loop
  ignore_errors: true

  # Example `ise_restore_task_status` Results:
  # ```
  # ise_restore_task_status:
  #   attempts: 1
  #   changed: false
  #   failed: false
  #   ise_response:
  #     detailStatus:
  #     - 'restore ISEEE-CFG10-230729-1159.tar.gpg from repository ftp.trust0.net : COMPLETED_WITH_FAILURE'
  #     executionStatus: COMPLETED_WITH_FAILURE
  #     failCount: 1
  #     id: f4f6d6a0-2f0a-11ee-ac12-2273676164ee
  #     moduleType: CONFIG BACKUP RESTORE MODULE
  #     resourcesCount: 1
  #     startTime: '1690743460106'
  #     successCount: null
  # ```
