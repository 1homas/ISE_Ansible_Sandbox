---
#------------------------------------------------------------------------------
# ISE Eternal Evaluation (ISEEE) - Destroy Playbook
#------------------------------------------------------------------------------
# Terminate AWS EC2 Instances for a tagged project:
#   - Terminate all EC2 instances
#   - Delete Subnets
#   - Delete Route Table
#   - Delete Internet Gateway
#   - Delete Security Groups in VPC
#   - Delete VPCs
#   - Delete private key
#   - TODO: Delete Route53 records
#   - TODO: Delete S3 Buckets
#
# Run: `ansible-playbook destroy.yaml`
#------------------------------------------------------------------------------

- name: Destroy All AWS EC2 Resources for project:{{ project_name }}
  hosts: localhost
  gather_facts: no
  vars_files: vars/iseee.yaml
  vars:
    project_name: iseee
    ssh_keypair_directory: ~/.ssh
    ssh_keypair_name: "{{ project_name }}"
  tasks:
    #----------------------------------------------------------------------------
    # Confirm Project!
    #----------------------------------------------------------------------------

    - name: Prompt for Project to Delete
      ansible.builtin.pause:
        prompt: "Confirm Project Name to Delete [{{ project_name | default('') }}]"
      register: project_name_input


    - name: Set Project Name
      when:
        - project_name_input.user_input is defined
        - project_name_input.user_input | length > 0
      ansible.builtin.set_fact:
        project_name: "{{ project_name_input.user_input | trim }}"


    #----------------------------------------------------------------------------
    # Get All Resources
    #----------------------------------------------------------------------------

    - name: Get All project:{{ project_name }} EC2 Instances
      amazon.aws.ec2_instance_info: # Get All by default
        filters:
          "tag:project": "{{ project_name }}"
          # instance-state-name:
          # - rebooted    # convenience alias for state=stopped immediately followed by state=running
          # - restarted   # convenience alias for state=stopped immediately followed by state=started
          # - running     # state=present + ensures the instances are running
          # - started     # state=running + waits for EC2 status checks to report OK if wait=true
          # - stopped     # ensures an existing instance is stopped.
          # - present     # instances exist, but does not guarantee any state (e.g. running)
          # - terminated  # ensures an existing instance is terminated.
          # - absent      # alias for state=terminated
      register: ec2_instances


    - name: Get All project:{{ project_name }} VPCs
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:project": "{{ project_name }}"
      register: vpcs


    - name: Get All project:{{ project_name }} Dangling ENIs in the VPC
      when: vpcs.vpcs is defined and vpcs.vpcs | length > 0
      amazon.aws.ec2_eni_info:
        filters:
          vpc-id: "{{ vpcs.vpcs[0].id }}"
          "tag:project": "{{ project_name }}"
      register: enis


    # - name: Get All DHCP Option in the VPC
    #   amazon.aws.ec2_vpc_dhcp_option_info:
    #     # filters:
    #     #   "tag:project": "{{ project_name }}"
    #   register: dhcp_info

    - name: Get All project:{{ project_name }} Subnets
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          "tag:project": "{{ project_name }}"
      register: subnets


    - name: Get All project:{{ project_name }} Route Tables
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          "tag:project": "{{ project_name }}"
      register: route_tables


    - name: Get All project:{{ project_name }} Internet Gateways
      amazon.aws.ec2_vpc_igw_info:
        filters:
          "tag:project": "{{ project_name }}"
      register: igws


    - name: Get All project:{{ project_name }} Security Groups
      amazon.aws.ec2_group_info:
        filters:
          "tag:project": "{{ project_name }}"
      register: security_groups


    #----------------------------------------------------------------------------
    # Summarize Resources to Destroy
    #----------------------------------------------------------------------------
    - name: Resource Summary
      ansible.builtin.debug:
        msg:
          - "{{ ec2_instances.instances | length }} EC2 Instances"
          - "{{ vpcs.vpcs | length }} VPCs"
          - "{{ enis.network_interfaces | default([]) | length }} ENIs"
          - "{{ subnets.subnets | length }} Subnets"
          - "{{ route_tables.route_tables | length }} Route Tables"
          # - "{{ dhcp_info is defined | ternary('1','0') }} DHCP Info"
          - "{{ igws.internet_gateways | length }} Internet Gateways"
          - "{{ security_groups.security_groups | length }} Security Groups"

    #----------------------------------------------------------------------------
    # Confirm Destruction!
    #----------------------------------------------------------------------------

    - name: Confirm Deletion
      ansible.builtin.pause:
        prompt: |
           
                  /\
                 /  \
                / ❕ \   Delete All resources in the project "{{ project_name }}"? [y/n] (yes)
               /______\
           
      register: input


    - name: Set Delete Confirmation
      when: input.user_input is defined
      ansible.builtin.set_fact:
        delete_confirmed: "{{ (input.user_input | length == 0) or (input.user_input[0] | lower == 'y') }}"


    #----------------------------------------------------------------------------
    # Delete VPC Resources
    #----------------------------------------------------------------------------
    - name: Delete VPC Resources
      when: delete_confirmed
      block:
        - name: Delete All project:{{ project_name }} EC2 instances
          when: delete_confirmed and ec2_instances is defined and ec2_instances | length > 0
          amazon.aws.ec2_instance:
            state: absent
            wait: yes
            filters:
              # instance-state-name: [ "running" ]
              "tag:project": "{{ project_name }}"
          register: ec2_instances_deleted


        - name: Delete All project:{{ project_name }} dangling ENIs
          when: delete_confirmed and enis.network_interfaces is defined and enis.network_interfaces | length > 0
          loop: "{{ enis.network_interfaces }}"
          amazon.aws.ec2_eni:
            state: absent
            eni_id: "{{ item.id }}"

        # - name: Delete All project:{{ project_name }} DHCP Options
        #   amazon.aws.ec2_vpc_dhcp_option:
        #     # vpc_id: "{{ vpcs.vpcs[0].id }}"
        #     state: absent
        #   register: dhcp_info_deleted


        - name: Delete All project:{{ project_name }} Subnets
          when: delete_confirmed and subnets is defined and subnets.subnets | length > 0
          loop: "{{ subnets.subnets }}"
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ item.vpc_id }}"
            cidr: "{{ item.cidr_block }}"
            state: absent
          register: subnets_deleted


        - name: Delete All project:{{ project_name }} Route Tables
          when: delete_confirmed and route_tables is defined and route_tables.route_tables | length > 0
          loop: "{{ route_tables.route_tables }}"
          amazon.aws.ec2_vpc_route_table:
            route_table_id: "{{ item.id }}"
            lookup: id
            state: absent
          register: route_tables_deleted


        - name: Delete All project:{{ project_name }} Internet Gateways
          when: delete_confirmed and igws is defined # and igws.internet_gateways | length > 0
          loop: "{{ vpcs.vpcs }}"
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ item.vpc_id }}"
            state: absent
          register: igws_deleted


        - name: Delete All project:{{ project_name }} Security Groups
          when: delete_confirmed and security_groups is defined and security_groups.security_groups | length > 0
          loop: "{{ security_groups.security_groups }}"
          amazon.aws.ec2_group:
            group_id: "{{ item.group_id }}"
            state: absent
          register: security_groups_deleted


        - name: Delete All project:{{ project_name }} VPCs
          when: delete_confirmed and vpcs is defined and vpcs.vpcs | length > 0
          loop: "{{ vpcs.vpcs }}"
          amazon.aws.ec2_vpc_net:
            vpc_id: "{{ item.vpc_id }}" # required
            purge_cidrs: yes # Remove CIDRs associated with VPC and no in cidr_block
            state: absent
          register: vpcs_deleted


        #
        # Delete the keypair from AWS
        #
        - name: Delete AWS EC2 SSH Keypair by Name ({{ ssh_keypair_name }})
          when: delete_confirmed
          amazon.aws.ec2_key:
            name: "{{ ssh_keypair_name }}"
            state: absent
          register: aws_ec2_key_deleted


        #
        # Delete the local keypair
        #
        - name: Delete Local SSH Private Key ({{ ssh_keypair_directory }}/{{ ssh_keypair_name }})
          when: 
            - delete_confirmed 
            - ssh_keypair_name is defined
          ansible.builtin.file:
            path: "{{ ssh_keypair_directory }}/{{ ssh_keypair_name }}"
            state: absent
          register: ssh_key_private_file_deleted


        - name: Delete Local SSH Public Key ({{ ssh_keypair_directory }}/{{ ssh_keypair_name }})
          when: 
            - delete_confirmed 
            - ssh_keypair_name is defined
          ansible.builtin.file:
            path: "{{ ssh_keypair_directory }}/{{ ssh_keypair_name }}.pub"
            state: absent
          register: ssh_key_public_file_deleted



        #----------------------------------------------------------------------------
        # Delete Route53 DNS Records
        #----------------------------------------------------------------------------

        # - name: Retrieve the DNS records
        #   community.aws.route53:
        #     state: get
        #     zone: "{{ domain_name }}"
        #     record: new.foo.com
        #     type: A
        #   register: records

        # - name: Delete A record using the results from the get command
        #   community.aws.route53:
        #     state: absent
        #     zone: "{{ domain_name }}"
        #     record: "{{ rec.set.record }}"
        #     ttl: "{{ rec.set.ttl }}"
        #     type: "{{ rec.set.type }}"
        #     value: "{{ rec.set.value }}"

        # - name: Delete public DNS entry for the ISE node(s)
        #   community.aws.route53:
        #     state: absent
        #     zone: "{{ domain_name }}"
        #     record: "{{ item.tags.Name }}.{{ domain_name }}"
        #     # overwrite: yes
        #     # private_zone: no
        #     # type: A
        #     # ttl: 7200
        #     # value: "{{ item.public_ip_address }}"
        #     # wait: no

        # - name: Delete private DNS entry for the ISE node(s)
        #   community.aws.route53:
        #     state: absent
        #     zone: "{{ domain_name }}"
        #     record: "{{ item.tags.Name }}.{{ domain_name }}"
        #     # overwrite: yes
        #     # private_zone: yes
        #     # type: A
        #     # wait: no

        # - name: Retrieve the DNS details
        #   community.aws.route53:
        #     state: get
        #     zone: "{{ domain_name }}"
        #     record: "{{ domain_name }}"
        #     type: A
        #   register: rec

        # - name: Delete A records using the results from the get command
        #   community.aws.route53:
        #     state: absent
        #     zone: "{{ domain_name }}"
        #     record: "{{ rec.set.record }}"
        #     ttl: "{{ rec.set.ttl }}"
        #     type: "{{ rec.set.type }}"
        #     value: "{{ rec.set.value }}"

        - name: ISEEE Destroyed!
          ansible.builtin.import_role:
            name: banner
          vars:
            banner_name: cisco_secure_ise_logo_small
            # 💡 Use single-quotes (') for banner text!
            #    Ansible will interpret \'s inside "'s as a special char delimiter!
            banner_line_1: '     _ ._  _ , _ ._                                                                '
            banner_line_2: '   (_ ` ( `  )_  .__)     ____              _                                 _  _ '
            banner_line_3: ' ( (  (    )   `)  ) _)  |  _ \   ___  ___ | |_  _ __  ___   _   _   ___   __| || |'
            banner_line_4: '(__ (_   (_ . _) _) ,__) | | | | / _ \/ __|| __|| `__|/ _ \ | | | | / _ \ / _` || |'
            banner_line_5: '    `~~`\ ` . /`~~`      | |_| ||  __/\__ \| |_ | |  | (_) || |_| ||  __/| (_| ||_|'
            banner_line_6: '         ;   ;           |____/  \___||___/ \__||_|   \___/  \__, | \___| \__,_|(_)'
            banner_line_7: '________/_ __ \_______________________________________________|___/________________'
            banner_text: ISEEE is Destroyed!
    